@using II_VI_Incorporated_SCM.Services
@using System.Security.Claims
@using Microsoft.AspNet.Identity
@model II_VI_Incorporated_SCM.Models.MeetingNote.MeetingNoteViewmodel
@using II_VI_Incorporated_SCM.Models
@{
    ViewBag.Title = "ViewMeetingNote";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style type="text/css">
    #centered_buttons {
        /*margin: 0 auto;
        width: 800px;
        float: none;*/
        margin: 0 auto;
        width: 40%;
    }

    .input-validation-error {
        border: 1px solid red !important;
        background-color: #fee !important;
    }

    ul.multiselect-container {
        padding-left: 25px !important;
        max-height: 150px !important;
        overflow-y: auto !important;
        overflow-x: hidden !important;
        margin-top: 1px !important;
    }
</style>
@using (Html.BeginForm("EditMeetingNote", "MeetingNote", FormMethod.Post, new
{
    @class = "form-inline",
    @role = "form",
    // @enctype = "form-data",
    @enctype = "multipart/form-data",
    @id = "uploadFormMeeting",@*@onsubmit = "return validateTask()"*@ }))
{
    <input type="hidden" name="MINUTES_NUM" value="@ViewBag.Num" />
    <div class="table-responsive" style="overflow: hidden">
        <table class="table table-striped table-bordered table-hover">
            <tr>
                <th colspan="2" class="text-center"><h1><b style="color:cornflowerblue">MEETING NOTE</b></h1></th>
                <th rowspan="2" width="280px">

                    <div style="display:flex">
                        MeetingNote Number:@ViewBag.Num
                    </div>
                    <br />

                    <div style="display:flex">
                        Created Date: @ViewBag.DateCreate.ToString("dd-MMM-yy")
                    </div>
                    <br />

                    <div style="display:flex">
                        Created By:   @ViewBag.Name
                    </div>
                    <br />

                    <div style="display:flex">
                        Status:         @ViewBag.Status
                    </div>
                    <br />

                    <div style="display:flex">
                        Meeting Date:<input type="text" required="required" name="MEETING_DATE" value="@Model.MEETING_DATE.ToString("dd-MMM-yy")" class="datepicker">
                        @*@Html.ValidationMessageFor(model => model.MEETING_DATE, null, new { @class = "help-block text-danger", @style = "margin: 1px" })*@
                        <label style="color:red" id="MeettingDate"></label>
                    </div>
                </th>
            </tr>
            <tr>
                <td width="50px">
                    <p><b>Subject</b></p>
                </td>
                <td>
                    @Html.TextAreaFor(m => m.SUBJECT, new
               {
                   @class = "form-control",
                   @style = "min-width: 100%;resize:vertical",
                   @rows = "3",
                   @required = "required"
               })
                </td>
            </tr>
            <tr>
                <td>
                    <p><b>Attendent</b></p>
                </td>
                <td colspan="2">
                    @*<select id="attendent" name="ATTENDANT" multiple="multiple" required style="width:100%"></select>*@
                    @Html.DropDownList("ATTENDANT", (IEnumerable<SelectListItem>)ViewBag.ListUser, new { @class = "form-control", id = "listuser", multiple = "multiple", required = "required", style = "width:100%" })
                    @Html.ValidationMessageFor(model => model.ATTENDANT, null, new { @class = "help-block text-danger", @style = "margin: 1px" })

                </td>
            </tr>
            <tr>
                <td width="50px">
                    <p><b>Content</b></p>
                </td>
                <td colspan="2">
                    @Html.TextAreaFor(m => m.MINUTES_CONTENT, new
               {
                   @class = "form-control",
                   @style = "min-width: 100%;resize:vertical",
                   @rows = "10",
                   @required = "required"
               })
                </td>
            </tr>
            <tr>
                <td>
                    <p><b>Attachment</b></p>
                </td>
                <td colspan="2">
                    <fieldset class="ms-showdata-iqc">
                        <table class="table table-striped table-bordered table-hover table-checkable order-column" id="tbEvidenceIQC">
                            <thead>
                                <tr>
                                    <th width="350px">File Name</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody id="tbodyEvidenceIQC">
                                @if (Model.OldEvidence.Count > 0)
                                {
                                    int i = 0;
                                    foreach (var evi in Model.OldEvidence)
                                    {
                                        <tr>
                                            <td width="80%;" style="text-align: left !important;">
                                                &nbsp;&nbsp;&nbsp;&nbsp;
                                                <a href="@Url.Action("DownloadFile", "MeetingNote", new { fileId = evi.MINUTES_NUM ,filename= evi.FILE_NAME})"><i class="fa fa-file-pdf-o"> &nbsp; @evi.ATT_PATH.Split('/')[1] </i></a>
                                                <input type="hidden" name="FILE_NAME" value="@evi.FILE_NAME" class="old-evi" />
                                            </td>
                                            <td><button onclick="deleteEvedenceRowIQC(this)" type="button" class="btn btn-danger pull-right">Delete</button></td>
                                        </tr>
                                        i++;
                                    }
                                }
                            </tbody>
                        </table>
                        <button type="button" class="btn btn-sm btn-success pull-right" id="btnAddEvidentIQC">Add File</button>
                    </fieldset>
                </td>
            </tr>
        </table>
    </div>
    if (ViewBag.TaskList != null)
    {
        var TaskList = (TASKLIST)ViewBag.TaskList;
        <h4><b>Action Item:</b></h4>
        <div class="row">
            <div class="col-xs-18 col-md-12">
                @(Html.Kendo().Grid<II_VI_Incorporated_SCM.Models.TaskManagement.TaskManagementNCRViewModel>()
                                                                                                                                                                                                                                    .Name("gridTaskDetail")
                                                                                                                                                                                                                                    .Columns(columns =>
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        columns.Bound(p => p.TaskDetail.TaskID).Hidden();
                                                                                                                                                                                                                                        columns.Bound(p => p.TaskDetail.TASKNAME).Title("Task").HtmlAttributes(new { @class = "ClickGrid" });
                                                                                                                                                                                                                                        columns.Bound(p => p.TaskDetail.OWNER).Title("Owner").Hidden();
                                                                                                                                                                                                                                        columns.Bound(p => p.AssigneeName).Title("Assignee").HtmlAttributes(new { @class = "ClickGrid" });
                                                                                                                                                                                                                                        columns.Bound(p => p.TaskDetail.EstimateEndDate).Title("Due Date").HtmlAttributes(new { @class = "ClickGrid" }).ClientTemplate("#= TaskDetail.EstimateEndDate ? kendo.toString(kendo.parseDate(TaskDetail.EstimateEndDate), 'dd-MMM-yy') : '' #");
                                                                                                                                                                                                                                        columns.Bound(p => p.TaskDetail.STATUS).Title("Status").HtmlAttributes(new { @class = "ClickGrid" });
                                                                                                                                                                                                                                        columns.Bound(p => p.TaskDetail.PRIORITY).Title("Priority").HtmlAttributes(new { @class = "ClickGrid" });
                                                                                                                                                                                                                                    })
                                                                                                                                                                                                                                    .Pageable()
                                                                                                                                                                                                                                    .Sortable()
                                                                                                                                                                                                                                    .Scrollable()
                                                                                                                                                                                                                                    .Filterable()
                                                                                                                                                                                                                                    .HtmlAttributes(new { style = "height:200px; border: 1px solid black;" })
                                                                                                                                                                                                                                    .DataSource(dataSource => dataSource
                                                                                                                                                                                                                                        .Ajax()
                                                                                                                                                                                                                                        .PageSize(10)
                                                                                                                                                                                                                                        .Read(read => read.Action("ReadTaksMantNCR", "TaskManagement", new { taskID = TaskList.TopicID }))
                                                                                                                                                                                                                                        .Sort(sort => sort.Add("TaskDetail.EstimateStartDate").Ascending())
                                                                                                                                                                                                                                    ))
            </div>
        </div>
    }
    <div align="center">
        @if ((bool)ViewBag.UserCreate && Model.STATUS == "Created")
        {
            <button class="btn btn-sm btn-success" id="Save">Save</button>
            <button class="btn btn-sm btn-info" id="Publish">Publish</button>
            <a class="btn btn-success btn-sm" href="@Url.Action("CreateTaskManagementNcrByTaskNo", "TaskManagement", new { taskNO =ViewBag.Num.Trim(),type="MEETINGNOTE" })">
                Add Task
            </a>
        }
        <button class="btn btn-sm btn-danger" id="Close">Close</button>
    </div>
}
<script>
    var $form = $('#uploadFormMeeting');
    $(document).ready(function () {
        $(function () {
            $('.datepicker').datepicker({
                format: 'dd-MM-yy',
                endDate: '+0d',
                autoclose: true
            });
        });
         $.post('@Url.Action("getvaluesetselected", "MeetingNote", new { meetingnum= Model.MINUTES_NUM})',
         function (result) {
             $.each(result.result, function (i, item) {
                 if (id == item.Value) attendent = true;
                 $('#listuser').append($('<option>', {
                     value: item.Value,
                     text: item.Text,
                     selected:true
                 }));
                 });
                 //Must Review this condition again
                 if (('@ViewBag.UserCreate'=='True')) { attendent = true;  }
                 if (attendent == false) {

                     window.location.href = '@Url.Action("MeetingNoteManagement", "MeetingNote")';
                     //alert('@ViewBag.Name'+" Cannot view content because you are not attendent of this meeting ");
                 }
        }).fail(function () {
            bootbox.alert('Please contact to Administrator!');
        }).always(function () {
            $.unblockUI();
        });
        $('#listuser').select2();
        var id = '@User.Identity.GetUserId()';
            @*$.post('@Url.Action("GetDropdownListUser", "MeetingNote")',
                function (result) {
                   // $('#approve').multiselect('dataprovider', result);
                    $("#attendent").multiselect({ dropUp: true, enableFiltering: true, enableCaseInsensitiveFiltering: true});
                    $('#attendent').multiselect('dataprovider', result);
                }).fail(function () {
                    bootbox.alert('Please contact to Administrator!');
                }).always(function () {
                    $.unblockUI();
                });*@
    });
    $('#Save').on('click', function (e) {
        debugger;
        e.preventDefault();
        let datemeeting = $('.datepicker').val();
        var dt_now = new Date();
        //var date = dt_now.getDate() + "";
        //if (date.length === 1) {
        //    date = "0" + date;
        //}
        //var month = (dt_now.getMonth() + 1) + "";
        //if (month.length === 1) {
        //    month = "0" + month;
        //}
        //alert("test");
        //var i = 1;
        var dt_string;//= date + '-' + month + '-' + dt_now.getFullYear();
        
        dt_string = DateFomartConvert_YYYMMDD(dt_now);
        var dt_meeting = DateFomartConvert_YYYMMDD(datemeeting);
        //if (datemeeting != "" && datemeeting > dt_string) {
        if (dt_meeting != "" && dt_meeting > dt_string) {
            $('.datepicker').addClass("input-validation-error");
          //  $("#MeettingDate").append("Equal or less Datetime Now");
            $('.datepicker').focus();
            return false;
        }
        else {
            $form.submit();
        }
    })
            $('#Publish').on('click', function (e) {
        e.preventDefault();
     $.post('@Url.Action("PublicMeetingNote", "MeetingNote", new { MeetingNum = Model.MINUTES_NUM})',
         function (result) {
               if (result == true) {
                        bootbox.alert('Publish MeetingNote Successful', function () {
                            window.location.href = '@Url.Action("MeetingNoteManagement", "MeetingNote")';
                        });
                    }
        }).fail(function () {
            bootbox.alert('Please contact to Administrator!');
        }).always(function () {
            $.unblockUI();
        });
            })
            $('#Close').on('click', function (e) {
                e.preventDefault();
                 window.location.href = '@Url.Action("MeetingNoteManagement", "MeetingNote")';
            })
    function DateFomartConvert_YYYMMDD(datepara) {
        if (datepara == "") return datepara;
        var date = new Date(datepara);
        var day = date.getDate();
        if (String(day).length === 1) {
            day = "0" + day;
        }

        var month = (date.getMonth() + 1);
        if (String(month).length === 1) {
            month = "0" + month;
        }
        var i = 1;
        var dt_string = date.getFullYear() + '/' + month + '/' + day;
        return dt_string;
    }
    $('#btnAddEvidentIQC').click(function () {
        //ModelEvidence
        let listRow = $('#tbEvidenceIQC tbody tr.trEvidenceIQC');
        let rowlength = listRow.length;

        for (let i = 0; i < rowlength; i++) {
            var ListColumns = listRow[i].children;
            ListColumns[0].children[0].name = "ModelEvidence[" + i + "].EvidenceFile";
            ListColumns[1].children[0].name = "ModelEvidence[" + i + "].IsPrint";
        }

        let template = '<tr class="trEvidenceIQC"> <td width="80%" ><input onchange="ViewFileEvidence(this)" accept="image/png,image/jpeg,image/bmp,application/pdf,application/PDF" type="file" class="form-control" name="ModelEvidence[' + rowlength + '].EvidenceFile"></td> <td><button onclick="deleteEvedenceRowIQC(this)" type="button" class="btn btn-danger pull-right">Delete</button></td> </tr>';
        $('#tbodyEvidenceIQC').append(template);
    });

    function deleteEvedenceRowIQC(e) {
        $(e).parent().parent().remove();
        let listRow = $('#tbEvidenceIQC tbody tr');
        let rowlength = listRow.length;
        for (let i = 0; i < rowlength; i++) {
            var ListColumns = listRow[i].children;
            ListColumns[0].children[0].name = "ModelEvidence[" + i + "].EvidenceFile";
            ListColumns[1].children[0].name = "ModelEvidence[" + i + "].IsPrint";
        }

    }
    var testevi = null;
    var arrExtension = ['png', 'pdf', 'jpeg', 'jpg', 'bmp'];
      function ViewFileEvidence(evi_file) {
            var test_value = $(evi_file).val();
            var extension = test_value.split('.').pop().toLowerCase();
            debugger
            if ($.inArray(extension, arrExtension) === -1 & test_value !== '') {
                bootbox.alert("Invalid file !");
                evi_file.value = '';
                return;
            }
            //if (evi_file.files[0].size > 10485760) {
            //    bootbox.alert('File is too big, more than 10mb !!!');
            //    evi_file.value = '';
            //    return;
            //}

            var formData = new FormData();

            formData.append('ReviewFile', evi_file.files[0]);
            console.log(formData);
            $.ajax({
                url: '@Url.Action("SaveFileReview", "NCRApproval")',
                type: "POST",
                dataType: 'json',
                contentType: false, // Not to set any content header
                processData: false, // Not to process data
                data: formData,
                success: function (result) {
                    window.open(result, '_blank');
                },
                error: function (err) {
                    window.open(err.responseText, '_blank');
                }
            });
    }
</script>

<script>
        var mygrid = $("#gridTaskDetail").kendoGrid({
            selectable: true
        });
        //select row data catch status
        mygrid.on("click", ".ClickGrid", function () {
            var grid = $("#gridTaskDetail").data("kendoGrid");
            var selectedItem = grid.dataItem(grid.select());
            var Task = selectedItem.TaskDetail.TaskID;

            @*window.location = '@Url.Action("EditTaskManagementNcr", "TaskManagement")' + "?taskID=" + Task;*@
            //tuan lua
              window.open('@Url.Action("EditTaskManagementNcr", "TaskManagement")' + "?taskID=" + Task,'_blank');
        });
</script>