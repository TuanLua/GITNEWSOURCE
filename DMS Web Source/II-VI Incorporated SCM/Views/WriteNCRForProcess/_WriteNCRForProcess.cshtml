@model II_VI_Incorporated_SCM.Models.NCR.NCRInProccessViewModel
<style>
    label.b {
        white-space: nowrap;
        width: 500px;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>
<div id="div-main" style="display:none">
    <fieldset class="col-md-12">
        <legend style="margin-bottom: -1px;">Information</legend>
        <div class="panel panel-default">
            <div class="panel-body">

                <div class="form-body">
                    <label class="col-md-3 control-label">Part Number <span style="color: red">*</span></label>
                    <div class="col-md-3">
                        @Html.TextBoxFor(m => m.MI_PART_NO, new
                   {
                       @class = "form-control",
                       @data_val = "true",
                       @data_val_required = "The Part Number field is re quired.",
                       @data_val_length = "The field MI_PART_NO must be a string with a maximum length of 30.",
                       @data_val_length_max = "30",
                   })
                        @Html.ValidationMessageFor(model => model.MI_PART_NO, null, new { @class = "help-block text-danger" })
                    </div>
                    <label class="col-md-3 control-label">REV<span id="span-DRAW_REV-required" style="color: red">*</span></label>
                    <div class="col-md-3">
                        <input type="text" class="form-control" name="DRAW_REV" id="DRAW_REV" required="required"  maxlength="6" />
                        @*@Html.TextBoxFor(m => m.DRAW_REV, new
                            {
                                @class = "form-control",
                                @data_val = "true",
                                @data_val_required = "The REV field is required.",
                                @data_val_length = "The field REV must be a string with a maximum length of 6.",
                                @data_val_length_max = "6",
                                @tabindex = "2"
                            })*@
                        @Html.ValidationMessageFor(model => model.DRAW_REV, null, new { @class = "help-block text-danger" })
                    </div>
                </div>


                <div class="form-body">
                    <label class="col-md-3 control-label labelpo">PO</label>
                    <div class="col-md-3">
                        @Html.TextBoxFor(m => m.PO_NUM, new
                   {
                       @class = "form-control",
                       @data_val = "true",
                       @data_val_length = "The field PO_NUM must be a string with a maximum length of 30.",
                       @data_val_length_max = "30",
                       @tabindex = "3"
                   })
                    </div>
                    <label class="col-md-3 control-label " id="labellot">LOT <span style="color: red">*</span></label>
                    <div class="col-md-3 " id="lotinput">
                        @*<input type="text" class="form-control" name="LOT" id="LOT" required maxlength="25"/>*@
                        @Html.TextBoxFor(m => m.LOT, new
                       {
                           @class = "form-control",
                           @data_val = "true",
                           @data_val_required = "The LOT field is required.",
                           @data_val_length = "The field LOT must maximum length of 25.",
                           @data_val_length_max = "25",
                           @tabindex = "4"
                       })
                        @Html.ValidationMessageFor(model => model.LOT, null, new { @class = "help-block text-danger" })
                    </div>
                </div>


                <div class="form-body">
                    <label class="col-md-3 control-label">MODEL OR SERIAL NO</label>
                    <div class="col-md-3">
                        @Html.TextBoxFor(m => m.MODEL_NO, new
                   {
                       @class = "form-control",
                       @data_val = "true",
                       @data_val_length_max = "50"
                   })
                    </div>
                    <label class="col-md-3 control-label labelreceiver">RECEIVER</label>
                    <div class="col-md-3">
                        @Html.TextBoxFor(m => m.RECEIVER, new
                   {
                       @class = "form-control",
                       @data_val = "true",
                       @data_val_length = "The field RECEIVER must be a string with a maximum length of 200.",
                       @data_val_length_max = "200"
                   })
                        <span id="Err_Receiver" class="help-block text-danger">
                        </span>
                    </div>
                </div>

                <div class="form-body">
                    <label class="col-md-3 control-label">DESCRIPTION OF MATERIAL<span style="color: red">*</span></label>       <div class="col-md-9">
                        @Html.TextAreaFor(m => m.ITEM_DESC, new
                   {
                       @class = "form-control",
                       @data_val = "true",
                       @required = "required",
                       @data_val_required = "The DESCRIPTION MATERIAL field is required.",
                       @data_val_length = "The field ITEM_DESC must be a string with a maximum length of 50.",
                       @data_val_length_max = "50"
                   })
                        @Html.ValidationMessageFor(model => model.ITEM_DESC, null, new { @class = "help-block text-danger" })
                    </div>
                </div>

            </div>
        </div>
    </fieldset>

    <fieldset class="col-md-12" id="div-vendor" style="display:none">
        <legend style="margin-bottom:-1px;">VENDOR </legend>
        <div class="panel panel-default">
            <div class="panel-body">

                <div class="form-body">
                    <label class="col-md-3 control-label">VENDOR</label>
                    <div class="col-md-9">
                        @Html.TextBoxFor(m => m.VENDOR, new
                   {
                       @class = "form-control",
                       @data_val = "true",
                       @data_val_length = "The field VENDOR must be a string with a maximum length of 20.",
                       @data_val_length_max = "20",
                       @tabindex = "1",
                       @onchange="checkRequired(this)"
                   })
                    </div>
                </div>
                <div class="form-body">
                    <label class="col-md-3 control-label">NAME</label>
                    <div class="col-md-9" style="margin-bottom: 6px">
                        @Html.TextAreaFor(m => m.VEN_NAME, new
                   {
                       @class = "form-control",
                       @data_val = "true",
                   })
                    </div>
                </div>
                <div class="form-body">
                    <label class="col-md-3 control-label">STREET ADDRESS</label>
                    <div class="col-md-9" style="margin-bottom: 6px">
                        @Html.TextAreaFor(m => m.VEN_ADD, new
                   {
                       @class = "form-control",
                       @data_val = "true",
                       @data_val_length = "The field VEN_ADD must be a string with a maximum length of 300.",
                       @data_val_length_max = "300"
                   })
                    </div>
                </div>
                <div class="form-body">
                    <label class="col-md-3 control-label">CITY</label>
                    <div class="col-md-3">
                        @Html.TextBoxFor(m => m.CITY, new
                   {
                       @class = "form-control",
                       @data_val = "true",
                       @data_val_length = "The field CITY must be a string with a maximum length of 50.",
                       @data_val_length_max = "50"
                   })
                    </div>
                    <label class="col-md-1 control-label">STATE</label>
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.STATE, new
                   {
                       @class = "form-control",
                       @data_val = "true",
                       @data_val_length = "The field STATE must be a string with a maximum length of 50.",
                       @data_val_length_max = "50"
                   })
                    </div>
                    <label class="col-md-1 control-label">ZIP CODE</label>
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.ZIP_CODE, new
                   {
                       @class = "form-control",
                       @data_val = "true",
                       @data_val_length = "The field ZIP_CODE must be a string with a maximum length of 50.",
                       @data_val_length_max = "50"
                   })
                    </div>
                </div>
            </div>

        </div>
    </fieldset>


    <fieldset class="col-md-12">
        <legend style="margin-bottom:-1px;">Inspection Plan</legend>
        <div class="panel panel-default">
            <div class="panel-body">

                <div class="form-body">
                    <div class="form-group">
                        <label class="col-md-3 control-label">SAMPLE INSP</label>

                        <div class="col-md-1">
                            @Html.CheckBoxFor(m => m.SAMPLE_INSP, new
                       {
                           id = "SAMPLE_INSP",
                           @class = "form-control",
                           @data_val = "true",
                       })
                        </div>

                        <label class="col-md-1 control-label">AQL</label>

                        <div class="col-md-1">
                            @Html.TextBoxFor(m => m.AQL, new
                       {
                           id = "AQL",
                           @class = "form-control",
                           @data_val = "true",
                           @data_val_length = "The field AQL must be a string with a maximum length of 50.",
                           @data_val_length_max = "50",
                           @readonly = "readonly"
                       })
                        </div>
                        <label class="col-md-1 control-label">LEVEL</label>

                        <div class="col-md-1">
                            @Html.TextBoxFor(m => m.LEVEL, new
                       {
                           id = "LEVEL",
                           @class = "form-control",
                           @data_val = "true",
                           @readonly = "readonly"
                       })
                        </div>
                        @*<div class="col-md-12" style=" margin-top: 10px; text-align: center; ">
                                <span style="color:red">Trong trường hợp kiểm 100% thì rec qty là lượng đã kiểm</span>
                            </div>*@
                    </div>
                </div>
                <div class="form-body">
                    <div class="form-group">
                        <label class="col-md-3 control-label">100% INSP</label>
                        <div class="col-md-1">
                            @Html.CheckBoxFor(m => m.PERCENT_INSP, new
                       {
                           @id = "IN",
                           @class = "form-control",
                           @data_val = "true",
                       })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">FIRST ARTICLE</label>

                        <div class="col-md-1">
                            @Html.CheckBoxFor(m => m.FIRST_ARTICLE, new
                       {
                           @class = "form-control",
                           @data_val = "true"
                       })
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-body">
                <div class="form-group">
                    <label class="col-md-4 control-label">
                        VN Material Traceability <span style="color: red">*</span>
                        <p><a target="_blank" href="@ViewBag.VNMaterialTraceabilityLink">Link to eCQ “VN Material Traceability”</a></p>
                    </label>
                    <div class="col-md-4">
                        @Html.TextBoxFor(m => m.VNMaterialTraceability, new { @class = "form-control", type = "file", accept = "application/pdf", multiple = "multiple" })
                    </div>
                    <div class="col-md-4">
                        @Html.ValidationMessageFor(m => m.VNMaterialTraceability, null, new { @class = "help-block text-danger" })
                    </div>
                </div>
            </div>
        </div>
    </fieldset>
    <fieldset class="col-md-12">
        <legend>Attach Evidence</legend>
        <div class="">
            <table class="table table-striped table-bordered table-hover table-checkable order-column" id="tbEvidenceInProcess">
                <thead>
                    <tr>
                        <th>File Name</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="tbodyEvidenceInProcess"></tbody>
            </table>
            <button type="button" class="btn btn-success pull-right" id="btnAddEvidentInProcess">Add File</button>
        </div>

    </fieldset>

    <fieldset class="col-md-12">
        <legend style="margin-bottom:-1px;">Inspection Result</legend>
        <div class="panel panel-default">
            <div class="panel-body">
                <div class="form-group">
                    <label class="col-md-3 control-label">INSPECTOR</label>
                    <div class="col-md-4">
                        @Html.TextBox("InspectorName", "", new
                   {
                       @class = "form-control",
                       @data_val = "true",
                       @readonly = "readonly"
                   })
                        @Html.HiddenFor(m => m.INSPECTOR, new
                   {
                   })
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-3 control-label">REC QTY<span style="color: red">*</span></label>
                    <div class="col-md-4">
                        @Html.TextBoxFor(m => m.REC_QTY, new
                   {
                       @class = "form-control",
                       @data_val_required = "The REC QTY field is required.",
                       @data_val = "true",
                       @required = "required",
                       @type = "text",
                       @onchange = "ValidateNumberInput(this)",
                   })
                        <div class="col-md-12" style=" margin-top: 10px; text-align: center; ">
                            <span style="color:red">Trong trường hợp kiểm 100% thì rec qty là lượng đã kiểm</span>
                        </div>
                    </div>
                    <div class="col-md-4">
                        @Html.ValidationMessageFor(model => model.REC_QTY, null, new { @class = "help-block text-danger" })
                    </div>

                </div>
                <div class="form-group">
                    <label class="col-md-3 control-label">INS QTY<span style="color: red">*</span></label>
                    <div class="col-md-4">
                        @Html.TextBoxFor(m => m.INS_QTY, new
                   {
                       @class = "form-control",
                       @data_val_required = "The INS QTY field is required.",
                       @data_val = "true",
                       @required = "required",
                       @type = "text",
                       @onchange = "ValidateNumberInput(this)",
                       @readonly = "readonly"
                   })
                    </div>
                    <div class="col-md-4">
                        @Html.ValidationMessageFor(model => model.INS_QTY, null, new { @class = "help-block text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-3 control-label">DEFECTIVE QTY<span style="color: red">*</span></label>
                    <div class="col-md-4">
                        @Html.TextBoxFor(m => m.Defect_QTY, new
                   {
                       @class = "form-control",
                       @data_val_required = "The DEFECTIVE QTY field is required.",
                       @data_val = "true",
                       @required = "required",
                       @type = "text",
                       @onchange = "ValidateNumberInput(this)",
                   })
                    </div>
                    <div class="col-md-4">
                        @Html.ValidationMessageFor(model => model.Defect_QTY, null, new { @class = "help-block text-danger" })
                    </div>
                    @*<div class="col-md-4">
                            <input type="text" required="required" class="form-control" id="defectqty" />
                        </div>*@
                </div>
                <div class="form-group">
                    <label class="col-md-3 control-label">REJECT QTY<span style="color: red">*</span></label>
                    <div class="col-md-4">
                        @Html.TextBoxFor(m => m.REJ_QTY, new
                   {
                       @class = "form-control",
                       @data_val_required = "The REJ QTY field is required.",
                       @data_val = "true",
                       @required = "required",
                       @type = "text",
                       @onchange = "ValidateNumberInput(this)",
                       @readonly = "readonly"
                   })
                    </div>
                    <div class="col-md-4">
                        @Html.ValidationMessageFor(model => model.REJ_QTY, null, new { @class = "help-block text-danger" })
                    </div>
                </div>
            </div>
        </div>
    </fieldset>
    <table id="tablenonconf" class="table table-striped table-bordered table-hover table-checkable order-column">
        <thead>
            <tr>
                <th style="width: 80px">ITEM</th>
                <th style="width: 80px">QTY</th>
                <th>DEFECT</th>
                <th>DESCRIPTION</th>
                <th>REMARK</th>
                <th></th>
            </tr>
        </thead>
        <tbody id="processtble"></tbody>
    </table>
    <input type="hidden" name="QUALITYASSURANCE" />
    <input type="hidden" name="AFG" />
    <input type="hidden" name="PURCHASING" />
    <input type="hidden" name="ENGINEERING" />
    <div class="row">
        <button type="button" class="btn btn-success pull-right" style="margin-right:15px;" onclick="addNewRaw()">Add</button>
    </div>
</div>

<script>
    $('#SAMPLE_INSP').on('click', function () {
        if ($('#SAMPLE_INSP').is(":checked") === true) {
            $('#IN').prop('checked', false);
            $('#LEVEL').val('C=0');
            $('#AQL').val('0.65');
        }
        else {
            $('#IN').prop('checked', true);
        }

        $('#REC_QTY').val('');
        $('#INS_QTY').val('');
        $('#Defect_QTY').val('');
        $('#REJ_QTY').val('');
    });
    $('#IN').on('click', function () {
        if ($('#IN').is(":checked") === true) {
            $('#SAMPLE_INSP').prop('checked', false);
            $('#LEVEL').val('');
            $('#AQL').val('');
        }
        else {
            $('#SAMPLE_INSP').prop('checked', true);
            $('#LEVEL').val('C=0');
            $('#AQL').val('0.65');

        }
        $('#REC_QTY').val('');
        $('#INS_QTY').val('');
        $('#Defect_QTY').val('');
        $('#REJ_QTY').val('');
    });

    function ValidateNumberInput(element) {
        //custom
        if (isNormalInteger(element.value) === true) {

            switch (element.id) {
                case 'REC_QTY': {
                    if (isNormalInteger($('#REC_QTY').val()) === true) {
                        if ($('#SAMPLE_INSP').is(":checked") === false) $('#INS_QTY').val($('#REC_QTY').val());
                        else {
                            $('#REJ_QTY').val($('#REC_QTY').val());
                            $.get("@Url.Action("GetSamplingSize", "WriteNcrForProcess")" + "?lotsize=" + $(element).val(), function (res) {
                                $('#INS_QTY').val(res);
                            });
                        }
                    }
                    else {
                        $('#INS_QTY').val('');
                    }
                } break;
                case 'Defect_QTY': {
                    debugger
                    if (isNormalInteger($('#Defect_QTY').val()) === true) {
                        if ($('#SAMPLE_INSP').is(":checked") === false) {

                            let INS_QTY = parseFloat($('#INS_QTY').val());
                            let Defect_QTY = parseFloat($('#Defect_QTY').val());
                            let htmlerror = '<span id="Defect_QTY-error" class="">The DEFECTIVE QTY field is less than or equal INS QTY: ' + INS_QTY + '.</span>';
                            let elemError = $('#Defect_QTY').parent().next().children();
                            if (Defect_QTY > INS_QTY) {
                                bootbox.alert('The DEFECTIVE QTY is ' + Defect_QTY +'. Please input new DEFECTIVE QTY field is less than or equal INS QTY: ' + INS_QTY, function () {
                                    $('#Defect_QTY').val('');
                                });
                                $('#Defect_QTY').removeClass('valid');
                                $('#Defect_QTY').addClass('input-validation-error');


                                elemError.html(htmlerror);
                                elemError.removeClass('field-validation-valid');
                                elemError.addClass('field-validation-error');
                            }
                            else {
                                $('#Defect_QTY').removeClass('input-validation-error');
                                $('#Defect_QTY').addClass('valid');

                                elemError.html('');
                                elemError.removeClass('field-validation-error');
                                elemError.addClass('field-validation-valid');
                                $('#REJ_QTY').val(Defect_QTY);
                            }
                        }
                        else {
                            let INS_QTY = parseFloat($('#INS_QTY').val());
                            let Defect_QTY = parseFloat($('#Defect_QTY').val());
                            let htmlerror = '<span id="Defect_QTY-error" class="">The DEFECTIVE QTY field is less than or equal INS QTY: ' + INS_QTY + '.</span>';
                            let elemError = $('#Defect_QTY').parent().next().children();

                            if (Defect_QTY > INS_QTY) {
                                bootbox.alert('The DEFECTIVE QTY is ' + Defect_QTY +'. Please input new DEFECTIVE QTY field is less than or equal INS QTY: ' + INS_QTY, function () {
                                    $('#Defect_QTY').val('');
                                });
                                $('#Defect_QTY').removeClass('valid');
                                $('#Defect_QTY').addClass('input-validation-error');

                                elemError.html(htmlerror);
                                elemError.removeClass('field-validation-valid');
                                elemError.addClass('field-validation-error');
                            }
                            else {
                                $('#Defect_QTY').removeClass('input-validation-error');
                                $('#Defect_QTY').addClass('valid');

                                elemError.html('');
                                elemError.removeClass('field-validation-error');
                                elemError.addClass('field-validation-valid');
                            }
                        }
                    }
                    else {
                        $('#REJ_QTY').val('');
                    }
                } break;
            }
        }
        else {
            bootbox.alert('Please check input qty. qty must more than 0');
        }
    }

    $('#btnAddEvidentInProcess').click(function () {
        //ModelEvidence
        let listRow = $('#tbEvidenceInProcess tbody tr');
        let rowlength = listRow.length;

        for (let i = 0; i < rowlength; i++) {
            var ListColumns = listRow[i].children;
            ListColumns[0].children[0].name = "ModelEvidence[" + i + "].EvidenceFile";
            ListColumns[1].children[0].name = "ModelEvidence[" + i + "].IsPrint";
        }

        let template = '<tr> <td width="80%"><input onchange="ViewFileEvidence(this)" accept="image/png,image/jpeg,image/bmp,application/pdf,application/PDF" type="file" class="form-control" name="ModelEvidence[' + rowlength + '].EvidenceFile"></td> <td><button onclick="deleteEvedenceRowInProcess(this)" type="button" class="btn btn-danger pull-right">Delete</button></td> </tr>';
        $('#tbodyEvidenceInProcess').append(template);
    });

    function deleteEvedenceRowInProcess(e) {
        $(e).parent().parent().remove();
        let listRow = $('#tbEvidenceInProcess tbody tr');
        let rowlength = listRow.length;
        for (let i = 0; i < rowlength; i++) {
            var ListColumns = listRow[i].children;
            ListColumns[0].children[0].name = "ModelEvidence[" + i + "].EvidenceFile";
            ListColumns[1].children[0].name = "ModelEvidence[" + i + "].IsPrint";
        }
    }

    function checkRequired(vm) {
        if ($(vm).val() === '') {
            $('#DRAW_REV').attr('required', false);
            $('#DRAW_REV-error').hide();
            $('#span-DRAW_REV-required').hide();
        }
        else {
            $('#DRAW_REV').attr('required', true);
            $('#span-DRAW_REV-required').show();
        }
    }
    $("#MI_PART_NO").on('keyup', function () {
        GetDescriptionbyPartNum();
    });
    function GetDescriptionbyPartNum() {
        let partnum = $("#MI_PART_NO").val();
        let ccn = $('#CCN').val();
        $.blockUI();
        $.post('@Url.Action("GetDescriptionbyPartNum", "WriteNcrForProcess")', { partnum: partnum ,ccn:ccn}, function (result) {
            if (result.success) {
                $("#ITEM_DESC").val(result.result);
            }
        }).fail(function () {
            bootbox.alert('Please contact to Administrator!');
        }).always(function () {
            $.unblockUI();
        });
    }
</script>
