@using II_VI_Incorporated_SCM.Models.SOReview
@using II_VI_Incorporated_SCM.Services
@using Microsoft.AspNet.Identity
@{
    ViewBag.Title = "SOReviewList";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .k-grid td {
        white-space: nowrap;
        overflow: hidden;
    }

    .k-grid table {
        table-layout: fixed;
    }

    .CRNo:hover {
        color: white;
        text-decoration: underline;
        cursor: pointer;
    }

    .CRNo {
        color: blue;
    }
</style>
<h3>Review SO </h3>
<div class="container-fluid row">
    <div class="col-sm-6" style="text-align:left">
        <button class="btn btn-sm btn-warning" id="view-file">View List File</button>
        <button class="btn btn-sm btn-warning" id="view-task">View Task List</button>
    </div>

    <div class="col-sm-6" style="text-align:right">
        <button class="btn btn-sm btn-info" id="add-task">Add Task</button>
        <button class="btn btn-sm btn-info" id="add-file">Add File</button>

        <button class="btn btn-sm btn-success" id="save">Save</button>
    </div>
</div>
<br />
<div class="container-fluid row">
    <div class="col-sm-6" style="text-align:left">
        <button class="btn btn-sm btn-info" id="view-review">List Review</button>
        <button class="btn btn-sm btn-success" id="view-all">View All</button>
    </div>

</div>
<div class="container-fluid">
    <div class="row">
        <div class="col-xs-18 col-md-12">
            @(Html.Kendo().Grid<ListSOItemReviewModel>()
                                                      .Name("gridSoReview")
                                                      .Columns(columns =>
                                                      {
                                                          columns.Bound(p => p.SONO).Title("So No").HtmlAttributes(new { @class = "history" }).Width(120).Editable("true");
                                                          columns.Bound(p => p.ItemReview).Title("Item Review").Width(300).Editable("true");
                                                          columns.Bound(p => p.ReviewResult).Title("Review Result Yes").Width(120).Editable("false")
                                                          .Template(@<text></text>).ClientTemplate("<input type='radio' name='#=Key#'  #= ReviewResult == true ? checked='checked':'' # class='form-control ReviewResult' />");
                                                          columns.Bound(p => p.ReviewResult1).Title("Review Result No").Width(120).Editable("false")
                                                          .Template(@<text></text>).ClientTemplate("<input  name='#=Key#'  type='radio' #= ReviewResult1 == true ? checked='checked':'' # class='form-control ReviewResult1' />");;
                                                          columns.Bound(p=> p.Comment).Title("Comment").Width(200).Editable("false");
                                                          columns.Bound(p => p.LastReview).Title("Last Review").Width(100).Editable("true");
                                                          columns.Bound(p => p.LastComment).Title("Last Comment").Width(200).Editable("true");
                                                          columns.Bound(p => p.SOHold).Title("SO on hold").Width(100).Editable("true");
                                                          columns.Bound(p => p.ShipToLocation).Title("Ship To Location").Width(100).Editable("true");
                                                          columns.Bound(p => p.ITEM).Title("ITEM").Width(100).Editable("true");
                                                          columns.Bound(p => p.NewSoReviewLW).Title("New SO vs last week").Width(100).Editable("true");
                                                          columns.Bound(p => p.FAI).Title("FAI").Width(100).Editable("true");
                                                          columns.Bound(p => p.LastBuild).Title("Last Build Dr Rev").Width(100).Editable("true");
                                                          columns.Bound(p => p.LastWeeks).Title("Last week Drw Revison Ref ").Width(100).Editable("true");
                                                          columns.Bound(p => p.DrawRevision).Title("Drw Revision(*)").Width(120).Editable("true");
                                                          columns.Bound(p => p.RequiredDate).Title("Required Date").Width(120).Editable("true").Format("{0:dd-MMM-yy}");
                                                          columns.Bound(p => p.OrderQty).Title("Order Qty").Width(120).Editable("true");
                                                          columns.Bound(p => p.BalanceQty).Title("Balance Qty").Width(120).Editable("true");
                                                          columns.Bound(p => p.BalanceValue).Title("Balance Value").Width(120).Editable("true");
                                                      })
                                                      .Sortable()
                                                      .Scrollable()
                                                      .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                    .Filterable()
                                                         .Excel(excel => excel
                                                    .FileName("So Review List.xlsx")
                                                    .ProxyURL(Url.Action("Excel_Export_Save", "Grid")))
                                                         .Pageable(m => m.PageSizes(new List<object> { 5, 10, 20, 50, "All" }).Refresh(true))
                                                      .HtmlAttributes(new { style = "height:750px;" })
                                                      .DataSource(dataSource => dataSource
                                                          .Ajax()
                                                          .PageSize(30)
                                                              .ServerOperation(false)
                                                            .Events(events => events.Error("error_handler"))
                                                          .Model(model => model.Id(p => p.SONO))
                                                          .Read(read => read.Action("ListSoReViewRead", "SOReview",new {isFilter = false}))
                                                      ))
        </div>
    </div>
</div>
 
<div id="popup" class="modal fade" role="dialog" data-backdrop="static" data-keyboard="false" aria-labelledby="basicModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Add File</h4>
            </div>
            <div class="modal-body">
                <br />
                <div class="form-horizontal col-md-offset-1">
                    <div class="form-group">
                        <label class="control-label col-md-3">So No</label>
                        <div class="col-md-6">
                            <select class="form-control" name="soNoFile" style="width:100%" id="soNoFile"></select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-3">Line</label>
                        <div class="col-md-6">
                            <select class="form-control" name="line" style="width:100%" id="line"></select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-3">Item Review</label>
                        <div class="col-md-6">
                            <select class="form-control" name="itemreviewFile" style="width:100%" id="itemreviewFile"></select>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-3">File</label>
                        <div class="col-md-6">
                            <input type="file" id="file" class="form-control boder-opal">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" id="save-file" class="btn btn-success">Save</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="popupTask" class="modal fade" role="dialog" data-backdrop="static" data-keyboard="false" aria-labelledby="basicModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Add Task</h4>
            </div>
            <div class="modal-body">
                <br />
                <div class="form-horizontal col-md-offset-1">
                    <div class="form-group">
                        <label class="control-label col-md-3">Assignee:</label>
                        <div class="col-md-6">
                            <select class="form-control" name="user" style="width:100%" id="user"></select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-3">Task Name</label>
                        <div class="col-md-6">
                            <input class="form-control" style="width:100%" id="taskname" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-3">So No</label>
                        <div class="col-md-6">
                            <select class="form-control" name="soNo" style="width:100%" id="soNo"></select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-3">Line</label>
                        <div class="col-md-6">
                            <select class="form-control" name="linetask" style="width:100%" id="linetask"></select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-3">Item Review</label>
                        <div class="col-md-6">
                            <select class="form-control" name="itemreview" style="width:100%" id="itemreview"></select>
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" id="btn-addtask" class="btn btn-success">Save</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>
@*@Html.Partial("ResultpartialView");*@
@*@(Html.Kendo().DropDownList()
        .Name("ReviewResultText") // The name of the widget has to be the same as the name of the property.
        .DataValueField("Value") // The value of the drop-down is taken from the EmployeeID property.
        .DataTextField("Text") // The text of the items is taken from the EmployeeName property.
        .BindTo((System.Collections.IEnumerable)ViewData["ReviewResultText"]) // A list of all employees which is populated in the controller.
    )*@
<script>
    var isSave = true;
    var message = "";
                $(document).ready(function () {
                    $.post('@Url.Action("GetListUser", "SoReview")',
                        function (result) {
                            $.each(result, function (i, item) {
                                $('#user').append($('<option>', {
                                    value: item.Value,
                                    text: item.Text
                                }));
                            });
                        }).fail(function () {
                            bootbox.alert('Please contact to Administrator!');
                        }).always(function () {
                        });
                    var $newOption = $("<option selected='selected'></option>").val("").text("")
                    $("#user").append($newOption).trigger('change');
                    $("#user").select2();

                    $.post('@Url.Action("GetListSoReviewAddTask", "SoReview")',
                        function (result) {
                            $.each(result, function (i, item) {
                                $('#soNo').append($('<option>', {
                                    value: item.Value,
                                    text: item.Text
                                }));
                                $('#soNoFile').append($('<option>', {
                                    value: item.Value,
                                    text: item.Text
                                }));
                            });
                        }).fail(function () {
                            bootbox.alert('Please contact to Administrator!');
                        }).always(function () {
                        });
                    var $newOption1 = $("<option selected='selected'></option>").val("").text("");
                    var $newOption2 = $("<option selected='selected'></option>").val("").text("");
                    $("#soNo").append($newOption1).trigger('change');
                    $("#soNoFile").append($newOption2).trigger('change');
                    $("#soNo").select2();
                    $("#soNoFile").select2();


                });
    $(".k-header").kendoTooltip({
        content: function (e) {
            var target = e.target; // element for which the tooltip is shown
            return $(target).text();
        },
        position: "top"
    });

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    $(document).ready(function () {

    $('#save').click(function () {
             var data = $("#gridSoReview").data("kendoGrid").dataSource.data();
             var arrResult = [];
        data.forEach(function (item) {
            if (item.ReviewResult1 == true && (item.Comment == null || item.Comment == "")) {
                isSave = false;
                message = "Please input Comment for Item result is false!";
            }
            else if (item.ReviewResult != null && item.ReviewResult1 != null) {
                arrResult.push(item)
            }
            })
        var lstData = JSON.stringify(arrResult);
             if (!isSave) {
                 bootbox.alert(message);
                 isSave = true;
                 return;
             }
             else {
                  $.blockUI();
                 $.post('@Url.Action("SaveDataSoReviewResult", "SoReview")', { lstData: lstData },
                     function (result) {
                         if (result) {
                             bootbox.alert('Save result sucess!', function () {
                                            window.location.href = "@Url.Action("ListSoReviewByUserLogin", "SoReview")";
                                        });
                         }
                         $.unblockUI();
                     }).fail(function () {
                         $.unblockUI();
                         bootbox.alert('Please contact to Administrator!');
                     }).always(function () {
                         $.unblockUI();
                     });
             }
        });
    });
    $('#add-task').on('click', function () {
        $('#itemreview').val('');
        $('#user').val('');
        $('#taskname').val('');
        $('#popupTask').modal('show');
    });
    $('#add-file').on('click', function () {
        $('#itemreviewFile').val('');
        $('#file').val('');
        $('#popup').modal('show');
    });

    $('#save-file').on('click', function () {
        let file = $('#file').val();
        var SoNo = $('#soNo').val();
        let ID = $('#itemreviewFile').val();
        let line = $('#line').val();
        if (file == "") {
            bootbox.alert("Please input file");
            return;
        }
        else if (ID == null) {
            bootbox.alert("Please select item!");
            return;
        }
        else {
        let filesave = $('#file').get(0).files;
        let date = '@ViewBag.DownloadDate';
        let name = '';
        if (filesave.length > 0) {
            name = filesave[0].name;
        }
        var formData = new FormData();
        formData.append("file", filesave[0]);
            if (name != '') {
                        $.ajax({ url: '@Url.Action("SaveFileADDINItem", "SoReview")', method: 'post', data: formData, contentType: false, processData: false })
                        }
          $.ajax({
                            url: '@Url.Action("AddFileforItemReview", "SoReview")',
              type: "POST",
              data: { SO_NO: SoNo, Date: date, File: name, ID: ID, line: line},
                            dataType: "json",
                            success: function (result) {
                                if (result.success) {
                                    bootbox.alert('Add File sucess!', function () {
                                        $('#popup').modal('hide');
                                        window.location.reload();
                                    });
                                }
                                else {
                                    bootbox.alert(result.message);
                                }
                            }
          });
        }
     })

    $('#btn-addtask').on('click', function () {
         var SoNo = $('#soNo').val();
        var itemreview = $('#itemreview').val();
        var assignee = $('#user').val();
        var taskname = $('#taskname').val();
        let line = $('#linetask').val();
         let date = '@ViewBag.DownloadDate';
        if (assignee == null || assignee == "") {
            bootbox.alert("Please select assignee!");
            return;
        }
        else if (taskname == null || taskname == "") {
            bootbox.alert("Please input Task Name!");
            return;
        }
        else if (itemreview  == null) {
            bootbox.alert("Please select item review!");
            return;
        }
        else {
            $.ajax({
                url: '@Url.Action("AddTaskForItemReview", "SOReview")',
                type: "POST",
                data: { SoNo: SoNo, itemreview: itemreview, assignee: assignee, item: line, taskname: taskname, downloaddate: date},
                dataType: "json",
                success: function (result) {
                    if (result.success) {
                        bootbox.alert('Add Task sucess!', function () {
                            $('#popupTask').modal('hide');
                            window.location.reload();
                        });
                    }
                    else {
                        bootbox.alert(result.message);
                        $('#popupTask').modal('hide');
                    }
                }
            });
        }

     });
    $('#view-task').on('click', function () {
        var date = '@ViewBag.DownloadDate';
        window.open("@Url.Action("ListTaskmanagementSOReview", "SoReview")" + "?date=" + date,"_blank");
    });
    $('#view-file').on('click', function () {
        var date = '@ViewBag.DownloadDate';
        window.open("@Url.Action("ListFilemanagementSOReview", "SoReview")" + "?date=" + date, "_blank");
    });
    $('#soNo').on('change', function () {
        var soNo = $('#soNo').val();
        $('#itemreview').html('');
        $('#linetask').html('');
        $.ajax({
            url: '@Url.Action("GetListItemSoReviewBySo", "SOReview")',
            type: "POST",
            data: { SoNo: soNo },
            dataType: "json",
            success: function (result) {
                $.each(result, function (i, item) {
                    $('#itemreview').append($('<option>', {
                        value: item.Text,
                        text: item.Text
                    }));
                });
            }
        });
           $.ajax({
                            url: '@Url.Action("GetListLineSoReviewBySo", "SOReview")',
                            type: "POST",
                            data: { SoNo: soNo },
                            dataType: "json",
                            success: function (result) {
                                $.each(result, function (i, item) {
                                    $('#linetask').append($('<option>', {
                                        value: item.Value,
                                        text: item.Text
                                    }));
                                });
                            }
                        });
    });

    $('#soNoFile').on('change', function () {
        var soNo = $('#soNoFile').val();
        $('#itemreviewFile').html('');
        $('#line').html('');
        $.ajax({
            url: '@Url.Action("GetListItemSoReviewBySo", "SOReview")',
            type: "POST",
            data: { SoNo: soNo },
            dataType: "json",
            success: function (result) {
                $.each(result, function (i, item) {
                    $('#itemreviewFile').append($('<option>', {
                        value: item.Value,
                        text: item.Text
                    }));
                });
            }
        });
                $.ajax({
                            url: '@Url.Action("GetListLineSoReviewBySo", "SOReview")',
                            type: "POST",
                            data: { SoNo: soNo },
                            dataType: "json",
                            success: function (result) {
                                $.each(result, function (i, item) {
                                    $('#line').append($('<option>', {
                                        value: item.Value,
                                        text: item.Text
                                    }));
                                });
                            }
                });

    });
    $('#view-review').on('click', function () {
        let Grid = $("#gridSoReview").data("kendoGrid");
        Grid.dataSource.transport.options.read.url = '@Url.Action("ListSoReViewRead", "SOReview")?isFilter=true';
        Grid.dataSource.read();
    })
     $('#view-all').on('click', function () {
        let Grid = $("#gridSoReview").data("kendoGrid");
        Grid.dataSource.transport.options.read.url = '@Url.Action("ListSoReViewRead", "SOReview")?isFilter=false';
        Grid.dataSource.read();
     })


    $(function () {
        $('#gridSoReview').on('click', '.ReviewResult', function () {
            var checked = $(this).is(':checked');
            var grid = $('#gridSoReview').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));
            dataItem.set('ReviewResult', checked);
            dataItem.set('ReviewResult1', false);
        })
    })
    $(function () {
        $('#gridSoReview').on('click', '.ReviewResult1', function () {
            var checked = $(this).is(':checked');
            var grid = $('#gridSoReview').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));
            dataItem.set('ReviewResult1', checked);
            dataItem.set('ReviewResult', false);
        })
    })
</script>
